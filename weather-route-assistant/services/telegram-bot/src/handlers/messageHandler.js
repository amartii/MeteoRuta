const axios = require('axios');
const logger = require('../utils/logger');

class MessageHandler {
  async handleTextMessage(ctx) {
    const userId = ctx.from.id;
    const messageText = ctx.message.text;

    // Ignorar comandos que ya est√°n manejados
    if (messageText.startsWith('/')) {
      return;
    }

    const statusMessage = await ctx.reply('üîç Procesando tu consulta meteorol√≥gica...');

    try {
      // Validar entrada
      if (messageText.length < 10) {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          statusMessage.message_id,
          undefined,
          '‚ùå Por favor, describe tu ruta con m√°s detalle.\n\n' +
          'üìù <b>Ejemplo:</b>\n' +
          '"Ruta por La Pedriza subiendo al Yelmo ma√±ana por la ma√±ana"\n\n' +
          'üí° <b>Incluye:</b>\n' +
          '‚Ä¢ Ubicaci√≥n espec√≠fica\n' +
          '‚Ä¢ D√≠a y hora aproximada\n' +
          '‚Ä¢ Tipo de ruta (circular, lineal, etc.)',
          { parse_mode: 'HTML' }
        );
        return;
      }

      logger.info('Processing route description:', {
        userId,
        username: ctx.from.username,
        messageLength: messageText.length,
        preview: messageText.substring(0, 100)
      });

      // 1. Procesar descripci√≥n de ruta
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        statusMessage.message_id,
        undefined,
        'üó∫Ô∏è Analizando descripci√≥n de ruta...'
      );

      const routeData = await this.processRouteDescription(messageText, userId);

      // 2. Obtener datos meteorol√≥gicos
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        statusMessage.message_id,
        undefined,
        'üå¶Ô∏è Consultando fuentes meteorol√≥gicas...'
      );

      const weatherData = await this.getWeatherForRoute(routeData);

      // 3. Componer respuesta
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        statusMessage.message_id,
        undefined,
        'üìä Generando briefing meteorol√≥gico...'
      );

      const briefing = await this.composeBriefing(weatherData, routeData);

      // 4. Enviar respuesta final
      await ctx.telegram.deleteMessage(ctx.chat.id, statusMessage.message_id);

      if (briefing.keyboard) {
        await ctx.replyWithHTML(briefing.text, { reply_markup: briefing.keyboard });
      } else {
        await ctx.replyWithHTML(briefing.text);
      }

      // Log successful processing
      logger.info('Successfully processed route request:', {
        userId,
        username: ctx.from.username,
        routePoints: routeData.waypoints?.length || 0,
        weatherSources: weatherData.sources?.length || 0
      });

    } catch (error) {
      logger.error('Error processing text message:', error);

      let errorMessage = '‚ö†Ô∏è Error procesando la consulta.\n\n';

      if (error.message.includes('timeout') || error.message.includes('ECONNABORTED')) {
        errorMessage += 'üïê <b>Timeout:</b> Las APIs meteorol√≥gicas est√°n tardando m√°s de lo normal.\n';
      } else if (error.message.includes('API key') || error.message.includes('401')) {
        errorMessage += 'üîë <b>Error de autenticaci√≥n:</b> Problema con las claves API.\n';
      } else if (error.message.includes('rate limit') || error.message.includes('429')) {
        errorMessage += '‚è∞ <b>L√≠mite alcanzado:</b> Demasiadas consultas recientes.\n';
      } else if (error.message.includes('ubicaci√≥n') || error.message.includes('not found')) {
        errorMessage += 'üìç <b>Ubicaci√≥n no encontrada:</b> Intenta ser m√°s espec√≠fico.\n';
      } else {
        errorMessage += 'üîß <b>Error t√©cnico:</b> Problema temporal del sistema.\n';
      }

      errorMessage += '\nüí° <b>Sugerencias:</b>\n';
      errorMessage += '‚Ä¢ Intenta de nuevo en unos momentos\n';
      errorMessage += '‚Ä¢ S√© m√°s espec√≠fico con la ubicaci√≥n\n';
      errorMessage += '‚Ä¢ Usa nombres de lugares conocidos\n';
      errorMessage += '‚Ä¢ Incluye d√≠a y hora de salida';

      await ctx.telegram.editMessageText(
        ctx.chat.id,
        statusMessage.message_id,
        undefined,
        errorMessage,
        { parse_mode: 'HTML' }
      );
    }
  }

  async processRouteDescription(description, userId) {
    try {
      const response = await axios.post(
        `${process.env.ROUTE_PROCESSOR_URL}/process-description`,
        {
          description,
          userId,
          timestamp: new Date().toISOString()
        },
        { 
          timeout: 30000,
          headers: { 'Content-Type': 'application/json' }
        }
      );

      return response.data;
    } catch (error) {
      if (error.code === 'ECONNABORTED') {
        throw new Error('Timeout procesando la ruta');
      }
      if (error.response?.status === 400) {
        throw new Error('Descripci√≥n de ruta no v√°lida');
      }
      if (error.response?.status === 404) {
        throw new Error('Ubicaci√≥n no encontrada');
      }
      throw new Error(`Error en servicio de rutas: ${error.message}`);
    }
  }

  async getWeatherForRoute(routeData) {
    try {
      const response = await axios.post(
        `${process.env.WEATHER_ORCHESTRATOR_URL}/weather-for-route`,
        routeData,
        { 
          timeout: 45000,
          headers: { 'Content-Type': 'application/json' }
        }
      );

      return response.data;
    } catch (error) {
      if (error.code === 'ECONNABORTED') {
        throw new Error('Timeout obteniendo datos meteorol√≥gicos');
      }
      if (error.response?.status === 429) {
        throw new Error('L√≠mite de rate limiting alcanzado');
      }
      throw new Error(`Error en servicio meteorol√≥gico: ${error.message}`);
    }
  }

  async composeBriefing(weatherData, routeData) {
    try {
      const response = await axios.post(
        `${process.env.RESPONSE_COMPOSER_URL}/compose-briefing`,
        {
          weatherData,
          routeData,
          timestamp: new Date().toISOString()
        },
        { 
          timeout: 15000,
          headers: { 'Content-Type': 'application/json' }
        }
      );

      return response.data;
    } catch (error) {
      if (error.code === 'ECONNABORTED') {
        throw new Error('Timeout componiendo respuesta');
      }
      throw new Error(`Error componiendo respuesta: ${error.message}`);
    }
  }
}

module.exports = new MessageHandler();
